#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Filtering.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"

#pragma only_renderers d3d11 ps4 xboxone vulkan metal switch

#pragma kernel KMainLowQ       MAIN=KMainLowQ       LOW_QUALITY
#pragma kernel KMainHighQ      MAIN=KMainHighQ      HIGH_QUALITY

TEXTURE2D(_InputLowTexture);
TEXTURE2D(_InputHighTexture);

RW_TEXTURE2D(float3, _OutputTexture);

SAMPLER(sampler_LinearClamp);

CBUFFER_START(cb0)
    float4 _Params;                 // x: scatter, y: unused, zw: high texel size
    float4 _BloomBicubicParams;     // xy: low src size, zw: low src texel size
CBUFFER_END

#define Scatter     _Params.x
#define TexelSize   _Params.zw

#define GROUP_SIZE 8

[numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
void MAIN(uint2 dispatchThreadId : SV_DispatchThreadID)
{
    PositionInputs posInputs = GetPositionInput(float2(dispatchThreadId), TexelSize, uint2(GROUP_SIZE, GROUP_SIZE));
    float2 uv = posInputs.positionNDC * _ScreenToTargetScale.xy;

    float3 highRes = LOAD_TEXTURE2D(_InputHighTexture, posInputs.positionSS).xyz;

#if LOW_QUALITY
    float3 lowRes = SAMPLE_TEXTURE2D_LOD(_InputLowTexture, sampler_LinearClamp, uv, 0.0).xyz;
#else // HIGH_QUALITY
    float3 lowRes = SampleTexture2DBicubic(TEXTURE2D_PARAM(_InputLowTexture, sampler_LinearClamp), uv, _BloomBicubicParams).xyz;
#endif

    _OutputTexture[posInputs.positionSS] = lerp(highRes, lowRes, Scatter);
}
